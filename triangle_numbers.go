/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

https://projecteuler.net/problem=12

*/

// interate up through the numbers, adding to the triangle total

// for each number, run a # of divisors test
// iterate from 1 -> sqrt of the number, adding two each time a clean division
// is possible
// return the number of divisors, if > 500 the give the triangle number

package main

import (
	"fmt"
	"math"
)

func DivisorCount(number int) int {
	divisors := 0

	ceiling := math.Sqrt(float64(number))

	for i := 1; i <= int(ceiling); i++ {
		if number%i == 0 {
			divisors += 2
		}
	}
	return divisors
}

func TriangleWalk() int {
	num_total := 0

	for i := 1; ; i++ {
		num_total += i
		div := DivisorCount(num_total)
		fmt.Printf("num: %v\ttri_num:%v\t divisors: %v\n", i, num_total, div)
		if div > 500 {
			return num_total
		}
	}
}

func main() {

	fmt.Println(TriangleWalk())

}
